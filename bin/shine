#!/usr/bin/env ruby

require File.join(File.dirname(__FILE__), *%w(.. lib shining))
require 'fileutils'
require 'tilt'
require 'erb'
require 'json/pure'

ACTIONS   = {
  :new_on!            => ['build'], 
  :new_slide!         => ['slide'], 
  :compile_templates! => ['compile'],
  :vendorize          => ['vendor', 'vendorize']
}
TEMPLATES = %w(haml erb)

class String; def /(s) File.join(self, s) end end

def doing what, &block
  puts what
  block.call if block_given?
end

def bail! reason
  STDERR.puts(reason) and exit(-2)
end

def vendorized?
  bail!("This isn't a Shining preso!") unless shining?
  File.exists? Dir.pwd/'vendor'/'lib'/'jquery.shining.js' and
    File.exists? Dir.pwd/'vendor'/'themes'
end

def figure_what_to_do!
  help_and_exit! if ARGV.empty?
  if ACTIONS.values.flatten.include? ARGV.first
    action = ACTIONS.select { |action, args| args.include? ARGV.first }.flatten.first
    send action, *ARGV[1..(ARGV.length - 1)]
  else
    new_on! ARGV.first
  end
end

def help_and_exit!
  STDERR.puts <<-HELP
Shine - Generates a new Shining presentation
  Usage:
    shine <directory>
  Example:
    shine mycoolpreso
  HELP
  exit -1
end

def new_on! dir
  target = File.expand_path(dir)
  doing("Creating #{target}")      { FileUtils.mkdir_p target }
  doing("Creating #{target/'config.json'}") { FileUtils.cp SHINING_ROOT/'templates'/'config.json', target/'config.json' }
  doing("Creating #{target/'index.html'}") {
    contents = File.read(SHINING_ROOT/'templates'/'index.html')
    File.open(target/'index.html', 'w') do |file| file.write ERB.new(contents).result end
  }
  doing("Creating #{target/'slides'}")      { FileUtils.cp_r SHINING_ROOT/'templates'/'slides', target/'slides' }
end

def new_slide! name
  bail!("This isn't a Shining preso!") unless shining?
  config = JSON.parse File.read(Dir.pwd/'config.json')
  config['slides'] << name
  File.open(Dir.pwd/'config.json', 'w') do |file| file.write JSON.pretty_generate(config) end
  doing("Creating #{Dir.pwd/'slides'/name}.html")  {
    File.open(Dir.pwd/'slides'/"#{name}.html", 'w') do |file| file.write "<h1 class='centered'>#{name}</h1><p class='centered>♫ ♫ ♫</p>" end
  }
  doing("Creating #{Dir.pwd/'slides'/name}.js")    { FileUtils.touch Dir.pwd/'slides'/name + '.js' }
end

def vendorize
  bail! 'This preso seems vendorized already.' if vendorized?
  FileUtils.mkdir Dir.pwd/'vendor'
  %w(lib css images themes).each do |required|
    FileUtils.cp_r SHINING_ROOT/required, Dir.pwd/'vendor/'
  end
  index = File.read SHINING_ROOT/'templates'/'index.html'
  Object.send(:remove_const, :SHINING_ROOT) and Object.const_set(:SHINING_ROOT, 'vendor')
  File.open(Dir.pwd/'index.html', 'w') do |file| file.write ERB.new(index).result end
  puts "Done!"
end

def compile_templates!
  bail!("This isn't a Shining preso!") unless shining?
  Dir[Dir.pwd/'slides'/'*'].reject { |f| f =~ /html|js$/ }.each do |template|
    begin
      target   = File.basename(template).sub(File.extname(template), '.html')
      rendered = Tilt.new(template).render
      File.open(Dir.pwd/'slides'/target, 'w') do |file| file.write rendered end
      puts "Compiled: #{File.basename(template)} -> #{target}"
    rescue RuntimeErroor
      STDERR.puts "Tilt coult not compile #{File.basename template}. Skipping."
    end
  end
end

def shining?
  File.exists?(Dir.pwd/'config.json') and File.directory?(Dir.pwd/'slides')
end

figure_what_to_do!